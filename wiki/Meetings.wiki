<wiki:toc max_depth="1" />

== Remaining Meeting Items ==

  # Status update
  # Things to improve:
   # Explicit container names for plotting routines
   # Breaks for hist
   # Package server offloading
   # Output packaging for Shiny
   # Testing
  # Look into [https://github.com/jcheng5/leaflet-shiny leaflet-shiny] as Joe suggested. This seems to be very similar to what we would like to do.
  # Where should we create an interface between R and JavaScript to minimize effort and support various plot types?
   * Discuss about Hardly Wickham's comments.
  # Use [https://github.com/douglascrockford/JSLint JSLint] or similar tool to ensure good coding style.
  # *Code refine issue(updated: 9.21)*
   # extract html generation code from "makeTable".
   # delete use of global "!AllAxisObjArr".
   # change use of axis id from 1 to container1.
   # provide box-whisker with legend.
   # legend structure(TBD with JH).
   # search box.
   # make event handle more convenient.
   # design layout with "< div>" in html code.

== 17SEP2013, 19SEP2013, 20SEP2013(temporary meetings) ==

Participants : Jae W.Lee, Jung Hoon Lee, Tae Joon Song, Chung Ha Sung.

  # Update from CH:
   # basic box-whisker.
   # fix some bugs with histogram.
  # Update from TJ:
   # make tutorial page.
  # Update from JH:
   # *upload package in CRAN(first cut).*
  # To-do list
   # design server offload system in javascript.
   # add option in R side, and re-upload package.

== 15SEP2013 ==

Participants : Jae W.Lee, Jung Hoon Lee, Tae Joon Song, Chung Ha Sung.

  # Update from CH:
   # fixed some bugs.
   # subset in dot.
  # Update from JH:
   # add tests on R.
   # modify path.
  # To-do list
   # Graph type(CH)
    # line with event handle by making a dataObj.
    # box-whisker.
    # add an example with pie.
   # Hide(CH)
   # Identifying server.R code to implement regression.(TJ)
    # example3/www/index.html and example3/server.R
   # Search box(for each dataObj) with simple function.(TJ)
  # Share documentation.(JH)
  # Make a histogram API on R side.(JH & CH)
  # Make a list for big problems.(TJ & CH)
  Next meeting : 20:30 (Korea time) on Tue, 9/17

== 11SEP2013 ==

Participants : Jae W.Lee, Jung Hoon Lee, Chung Ha Sung.

  # Update from CH:
   # basic legend.
   # basic color as an option.
  # Update from JH:
   # Simple package is being developed.
  # To-do list
   # subsetting with simple boolean equation.
   # get used to R-base-graphics API.
   # get used to JH's R package code.
  # TJ can participate in our team again from this Friday.

== 01SEP2013 ==

Participants : Jae W.Lee, Jung Hoon Lee, Chung Ha Sung.

  # Update from CH:
   # histogram stacking.
   # basic line graph.
  # Update from JH:
   # Simple package is being developed.
  # To-do list
   # Basic event handler and right click(e.g. change axis) should be done as soon as possible for making a simple package.
   # Regression line with server offload part, or without it.
   # R API for code generation.

== 25AUG2013 ==

Participants : Jae W.Lee, Jung Hoon Lee, Chung Ha Sung.

  # Update from CH:
   # Scatter and histogram works.
   # Hovering works. 
   # Currently fixing event handling. No technical challenges expected.
   # Will work on line plot once event handling is done. Think about grouping.
  # Update from JH:
   # R package development will be done in three steps:
    # Plots requiring only client-side code.
    # Plots requiring server-side offloading, which requires Shiny but does not uses any of its inputs.
    # Support RIGHT as Shiny output.
   # Huan Sun will be our new member in September.
  # Event handler for line plots.
  # Histogram stacking.
  # Follow-up plan:
   # Finish GSoC successfully.
   # Announce the package in R-Blogs and other mailing lists.
   # Target a few conferences in 2014:
    * [http://www.amstat.org/meetings/jsm.cfm Joint Statistical Meeting JSM 2014]
    * [http://user2014.stat.ucla.edu/ UseR! Conference 2014]
    * [http://www.page-meeting.org/ PAGE Conference 2014]
   # Target a journal, e.g. [http://www.jstatsoft.org/ Journal of Statistical Software] or [http://journal.r-project.org/ The R Journal], once the package is fully refined. 
   # RIGHT will become a benchmark problem for the upcoming JavaScript acceleration project.

== 04AUG2013 ==

Participants : Jae W.Lee, Jung Hoon Lee, Tae Joon Song, Chung Ha Sung.

  # About 90% of code restructuring is done for axis, event handling, scatter, and hist.
   # Event handling code is in hist.js and common.js.
   # Axis code is in axis.js. Points overlaid outside of the axis range are discarded with warning for now. Let's remove warning, and we will revisit this issue later.
   # *Junghoon* should review some code.
  # We would like to build our first R package in mid August. For this, 
   # Let's clean up the code for the line plot. This code will be used to test server offloading with regression example.
   # The following examples will be created from R and tested:
    # Simple visualization example without Shiny.
    # Server offloading example (with Shiny in the background) with regression code running at the server.
    # Embed RIGHT as Shiny output.
  # How to layout search box? (lower priority for now)
   # We agree that the search box should take minimal space, like Google's search box.
   # Junghoon was originally thinking of providing a search box per root data structure. However, drop down box to choose between data structures can be useful. 
   # Pull-down menu to choose field names?
   # If we want to really go minimal, we should have auto complete and some syntax to choose the root data structure.
  # Right-click menu?
   # Let's keep hide, reset, x-axis, y-axis, and color for now.
   # Adding shape will be nice (lower priority)
   # Pull-down menu for axes, color, and shape will be nice (lower priority)
  # Stacked and parallel bar for histogram should be supported.
  # Update EventHandling page with updated information.
  
== 28JUL2013 ==

Participants : Jae W.Lee, Jung Hoon Lee, Tae Joon Song, Chung Ha Sung.

  # Line chart will be added once the code is cleaned up.
  # Frequency calculation is used in both histogram and pie charts. Factor the common code out.
  # Pass isHidden information rather than x and y to the server.
  # Example R API code:
{{{
obj <- RIGHT(sub.diamonds, fun = {
  plot.RIGHT(sub.diamonds, carat, price, color, "right", 300, 300)
  regArray <- runServer.RIGHT({ 

     obj <- loess(price ~ carat, data = sub.diamonds)
     xRange <- range(sub.diamonds$carat
     yRange <- range(sub.diamonds$price
     simARray <- data.frame(carat = seq(xRange[1], xRange[2], length.out = 100)
  
     ...

  })
  lines.RIGHT(regArray, carat, price)
})
}}}
  # If we are going to let people customize the visualization in R, should we let people to change the pop-up menu, e.g. add turn on/off regression, as well? 
   * It would be nice to support this. However, if customization from R is easy, people may just recreate the visualization.
   * Let's keep this as a lower priority objective.
  # How to re-arrange the code:
   # Clean up mainArr to support multiple input data:
    * Create `InteractiveData` class/object that keeps isHidden and isSelected information in addition to data columns. For instance,
{{{

obj = new InteractiveData(); // returns obj = {isHidden: [], isSelected: []}
obj.carat = [...]; // add new column
obj["price"] = [...]; // add new column

}}}
    * `createMainStructure()` should return the InsteractiveData object excplicitly, e.g. `mainArr = createMainStructure('_sub.diamonds.csv')`.
   # `InteractiveData` object should also keep a list of callback functions for any change in `inHidden` and `isSelected`. For instance, `onInputChange()` should be a callback function for any change in `isHidden`. See [http://api.jquery.com/jQuery.Callbacks/ jQuery.Callbacks()] to manage callback functions.
   # Result of shiny server side code will be returned into regArr.
   # `lines(regArr, ...)` is added to JavaScript.
  # Overlaying plots: 
   * R supports two categories of functions. One category, including `plot()`, refreshes the axis, and the other, including `points()` and `lines()` does not. For instance, try the following in R:
{{{
subArray <- diamonds[sample(1:nrow(diamonds), 1000, T), ]

plot(price ~ carat, data = subArray, type = "n") # creates a blank axis
lines(subArray$carat, subArray$price) # overlay points
points(subArray$carat, subArray$price) # overlay lines

plot(price ~ carat, data = subArray, type = "p") # refreshes axis and plots points
}}}
   * We can create similar functions in JavaScript. There should be a function that creates a blank axis, and functions to draw different visual elements (points, lines, boxes, etc) on the axis.
  # Testing
   * Separate calculation part from drawing part exactly for making adding unit-testing easier.

== 21JUL2013 ==

Participants : Jae W.Lee, Jung Hoon Lee, Tae Joon Song, Chung Ha Sung.
  
  # Server offloading. After the server side gets an updated array (hidden  or not-hidden nodes), it performs linear regression, and sends (x, y) values for model prediction back to the client. 
  # Add line chart. Use it to plot the model-predicted (x, y) values in a separate plot or by overlaying on top of the scatter plot of original data. (Eventually, overlaying should be supported. This may require some code reorganization/refactoring.)
  # Start documentation, 
  # Start unit testing using [http://qunitjs.com/ QUnit]. Start from the code that makes an array from a css file since it does not involve any event generation or processing.
  # Using callback function, simple operations, such as redrawing axis, can be handled solely by the client without any server involvement. For event handling, see [http://stackoverflow.com/questions/9099555/jquery-bind-events-on-plain-javascript-objects stackoverflow] or [http://api.jquery.com/category/callbacks-object/ API documentation].
  # Switch license term to GPL, and separate our own code from shiny part.

== 13JUL2013 ==

Participants : Jae W.Lee, Jung Hoon Lee, Tae Joon Song, Chung Ha Sung.

  # We managed to accomplish step 2 of the following list for the bare-bone toy example. Once this works, we can get back to the prototype problem (linear regression) we started.
   # Send a JavaScript object holding arrays, e.g. (x, y) values, from the client to server.
   # Server can perform operations on the received information, treating it as a data.frame object.
   # Client can receive the information from the server as a JavaScript object holding arrays.
  # Explored shiny code (shiny.js) and discussed about the general direction we are heading.
  # TJ's participation will be limited during the week. Also, he will be in new employee orientation in August.

== 06JUL2013 ==

Participants : Jae W.Lee, Jung Hoon Lee, Tae Joon Song, Chung Ha Sung.

  # Latest code is collected under the trunk:
   * Functions with kineticJS 4.5.4
   * Tagged as version 2.0 (cleaned up version after the senior project presentation)
  # Decided to change the license from MIT to GPL.
  # Analyse Shiny(Down load shiny from cran)
   * Understand "startApp" of shiny.
   * Understand transferring the image. 
   * *First action item : making a simple graph of modified shiny.*
  # Unit testing survey
   * *Trying to adjust Qunit module to our code.*
  # Adding a new graph type
   * *Add a box-whisker graph (discontinuous - continuous graph).*
  # Improve code(but, later issue)
   * divide draw part from data analysis part -> expect for supporting a various visualization.

Next meeting : 09:00 AM (Korea time) on Sat, 7/13

== 02JUN2013 ==

Participants : Jae W.Lee, Jung Hoon Lee, Tae Joon Song, Chung Ha Sung.

  # Tae Joon will be interning at Samsung from the beginning of July to the end of August.
  # KineticJS and browser compatibility issue: 
   * We decided stick to KineticJS during the GSoC since
    * Developing our own code or switching to jQuery during the summer can be too time consuming and risky.
    * KineticJS works with most browsers, including Opera and Safari, except Chrome. We may be able to find a way to make it work. Otherwise, we will just report the compatibility issue at the end of GSoC.
   * *We will try to structure the code in such a way that replacing the KineticJS with something more suitable can be done quite easily.*
  # Should we try to collaborate with RStudio/Shiny?
   * This will help us reduce some uncertainty in server offloading and may make our work more useful/popular.  
   * We may have to switch to GPL-3 to freely use Shiny's code. We agreed that such a switch is fine since the authors can release the code under multiple licenses.
   * *Junghoon will create an example using Shiny's server-side interactivity support. Chung Ha and Tae Joon will try to change the code by supporting outlier removal using client-side interactivity RIGHT provides.*
    * Look into the HTML code Shiny generates.
    * Also look into shiny.js to understand Shiny's communication protocol.
   * Shiny seems to be using jQuery (see [http://rstudio.github.io/shiny/tutorial/#html-ui HTML UI]). It is not clear whether jQuery is compatible with KineticJS.
  # How should the R API look like? 
   * We decided to support base graphics-type syntax.
   * If it turns out that server offloading can be addressed without much difficulty, we will try to support ggplot2-type syntax using `ggplot_build()` function. *Junghoon will send an example to Chung Ha and Tae Joon.*
   * *Look into into Shiny's code to perform code generation more efficiently.*

Research prior to meeting
 # Shiny uses "Fast bidirectional communication between the web browser and R using the websockets package".
  * Websockets package is under LGPL-3 license.
   * http://illposed.net/websockets.html
   * http://cran.r-project.org/web/packages/websockets/vignettes/websockets.pdf
  * Websockets package is possible to be adjusted in our code(need more study).
  * Reactive issue in shiny is the difference with our concept.
   * See [http://rstudio.github.io/shiny/tutorial/#inputs-and-outputs Inputs & Outputs] to have some idea how renderText, renderPlot, and reactive work.
   * Shiny also seems to use AJAX. See renderUI function in [http://rstudio.github.io/shiny/tutorial/#dynamic-ui Dynamic UI]. conditionalPanel function seems do it in the client-side using JavaScript.
 # Shiny Server is free and open source, though in the future we will offer a commercially licensed edition with additional features for larger organizations. So, it might be a limitation in the near future, if we just take it. Right now, Shiny provides free beta service.
 # KineticJS
  * There is a bug report slot for users  (https://github.com/ericdrowell/KineticJS/issues?page=1&state=open).
  * Keep changing syntax.

== 28FEB2013 == 

participants : Jae W.Lee, Jung Hoon Lee, Tae Joon Song, Chung Ha Sung.

Contents
  # Discussion for the next step
   * Remove "delete" function, and add "ctrl+z" for "hide" function.
   * Make to work both box drag search and boolean expression search at the same time. (When searching with boolean statements, [ans] saves not only expression, but also nodes themselves. )
   * Think about histogram bin size later
   * When resizing graphs, set the minimum size.
   * R code generation. (Dr. Jung Hoon Lee will give it to us.)
   * Draw charts (html5) on R.
   * Implement other basic graphs with refining old graphs. ( box-and-whisker )
   * Try other data sets( Try with discontinuous data set)
   * Make another directory for box-and-whisker graph, and put the common parts with scatter and hist graph into one file.
  # Report challenge
   * Better performance when driving large data set.
   * Refine the codes to work with various data set. (including discontinuous data and different x variable in histogram)

Next meeting : 10:00 AM (Korea time) on Sat, 3/16

== 24FEB2013 ==

participants : Jung Hoon Lee, Chung Ha Sung, Taejoon Song.

Contents
  # Discussion for the next step
   * Add functionality of mouse right click(e.g. hide)
   * Add functionality of the search box(e.g. [ans], delete, reset)
   * Modify the information box and add transition select.
   * Add a text box for histogram of diff.
  # Report challenge
   * Hierarchy the data layer for driving large data set.
  # Later purpose
   * Abstract each function(e.g. framework) to make the project comfortable for many charts.
   * Complete the prototype.
 
Next meeting : TBD.

== 16FEB2013 ==

participants : Jae W.Lee, Jung Hoon Lee, Chung Ha Sung.

Contents

  # Report challenges 
   * Figuring out solutions to resolve finding conflict the same node ids which are in different stages or layers in order to remove select layer which make the program heavy. -> should know exact function of a node finding function and understand kinetic library(relation between stage and node).
   * The program is not compatible with every browser. -> should be compatible with Firefox first, other browser later(priority low).
  # Discussion for the next step
   * Make prototype first at least until 1st week on March.
   * Set the prototype level 
    # Interactive selection node graph with many datasets without any bug.
    # Searching box(boolean language) using javascript.
    # Information box of each node.
  # Later purpose
   * Abstract each function(e.g. framework) to make the project comfortable for many charts.
   * Divide work(e.g. R code generation & Server offloading).

Next meeting : 01:00 PM (which is 11:00 PM in NJ Time) on Sun, 2/24 through skype.

== 28JAN2013 ==

participants : Jae W.Lee, Jung Hoon Lee, Tae Joon Song, Chung Ha Sung.

Contents

  # Environment Settings
   * Set up the google code and SVN directory to manage the project.
   * Make the project name "---------".
   * Share emails and add google talk ID.
   * Set up conference call schedules : once per two weeks 
  # First action item
   * Implement drawing function on client side. ex) drawDot, drawLine, plot, point, axis, axisLabel
    # Consider data structure. (ex. array)
    # Should be similar to other languages in order to make it easy for code generation. (HTML5 vs Javascripts)
  # Reference :  
   * http://www.rgraph.net/  (example interactive graph on R)
   * http://stackoverflow.com/ (Q&A for language problems)

Next meeting : 10:30 AM (which is 8:30 PM in NJ Time) on Sat, 2/16