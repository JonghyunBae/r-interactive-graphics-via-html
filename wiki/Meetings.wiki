  # Status update
  # Things to improve:
   # Plot overlaying 
   # Event handling
   # R API for code generation
   # Output packaging for Shiny
  # Look into [https://github.com/jcheng5/leaflet-shiny leaflet-shiny] as Joe suggested. This seems to be very similar to what we would like to do.
  # Deep dive into event handling interface. See EventHandling for more details.
  # Where should we create an interface between R and JavaScript to minimize effort and support various plot types?
   * Discuss about Hardly Wickham's comments.
  # Use [https://github.com/douglascrockford/JSLint JSLint] or similar tool to ensure good coding style.

----

Date : 21JULY2013

Participants : Jae W.Lee, Jung Hoon Lee, Tae Joon Song, Chung Ha Sung.
  
  # Server offloading. After the server side gets an updated array (hidden  or not-hidden nodes), it performs linear regression, and sends (x, y) values for model prediction back to the client. 
  # Add line chart. Use it to plot the model-predicted (x, y) values in a separate plot or by overlaying on top of the scatter plot of original data. (Eventually, overlaying should be supported. This may require some code reorganization/refactoring.)
  # Start documentation, 
  # Start unit testing using [http://qunitjs.com/ QUnit]. Start from the code that makes an array from a css file since it does not involve any event generation or processing.
  # Using callback function, simple operations, such as redrawing axis, can be handled solely by the client without any server involvement. For event handling, see [http://stackoverflow.com/questions/9099555/jquery-bind-events-on-plain-javascript-objects stackoverflow] or [http://api.jquery.com/category/callbacks-object/ API documentation].
  # Switch license term to GPL, and separate our own code from shiny part.

----

Date: 13JULY2013

Participants : Jae W.Lee, Jung Hoon Lee, Tae Joon Song, Chung Ha Sung.

  # We managed to accomplish step 2 of the following list for the bare-bone toy example. Once this works, we can get back to the prototype problem (linear regression) we started.
   # Send a JavaScript object holding arrays, e.g. (x, y) values, from the client to server.
   # Server can perform operations on the received information, treating it as a data.frame object.
   # Client can receive the information from the server as a JavaScript object holding arrays.
  # Explored shiny code (shiny.js) and discussed about the general direction we are heading.
  # TJ's participation will be limited during the week. Also, he will be in new employee orientation in August.

----

Date : 06JULY2013

Participants : Jae W.Lee, Jung Hoon Lee, Tae Joon Song, Chung Ha Sung.

  # Latest code is collected under the trunk:
   * Functions with kineticJS 4.5.4
   * Tagged as version 2.0 (cleaned up version after the senior project presentation)
  # Decided to change the license from MIT to GPL.
  # Analyse Shiny(Down load shiny from cran)
   * Understand "startApp" of shiny.
   * Understand transferring the image. 
   * *First action item : making a simple graph of modified shiny.*
  # Unit testing survey
   * *Trying to adjust Qunit module to our code.*
  # Adding a new graph type
   * *Add a box-whisker graph (discontinuous - continuous graph).*
  # Improve code(but, later issue)
   * divide draw part from data analysis part -> expect for supporting a various visualization.

Next meeting : 09:00 AM (Korea time) on Sat, 7/13

----

Date : 02JUN2013

Participants : Jae W.Lee, Jung Hoon Lee, Tae Joon Song, Chung Ha Sung.

  # Tae Joon will be interning at Samsung from the beginning of July to the end of August.
  # KineticJS and browser compatibility issue: 
   * We decided stick to KineticJS during the GSoC since
    * Developing our own code or switching to jQuery during the summer can be too time consuming and risky.
    * KineticJS works with most browsers, including Opera and Safari, except Chrome. We may be able to find a way to make it work. Otherwise, we will just report the compatibility issue at the end of GSoC.
   * *We will try to structure the code in such a way that replacing the KineticJS with something more suitable can be done quite easily.*
  # Should we try to collaborate with RStudio/Shiny?
   * This will help us reduce some uncertainty in server offloading and may make our work more useful/popular.  
   * We may have to switch to GPL-3 to freely use Shiny's code. We agreed that such a switch is fine since the authors can release the code under multiple licenses.
   * *Junghoon will create an example using Shiny's server-side interactivity support. Chung Ha and Tae Joon will try to change the code by supporting outlier removal using client-side interactivity RIGHT provides.*
    * Look into the HTML code Shiny generates.
    * Also look into shiny.js to understand Shiny's communication protocol.
   * Shiny seems to be using jQuery (see [http://rstudio.github.io/shiny/tutorial/#html-ui HTML UI]). It is not clear whether jQuery is compatible with KineticJS.
  # How should the R API look like? 
   * We decided to support base graphics-type syntax.
   * If it turns out that server offloading can be addressed without much difficulty, we will try to support ggplot2-type syntax using `ggplot_build()` function. *Junghoon will send an example to Chung Ha and Tae Joon.*
   * *Look into into Shiny's code to perform code generation more efficiently.*

Research prior to meeting
 # Shiny uses "Fast bidirectional communication between the web browser and R using the websockets package".
  * Websockets package is under LGPL-3 license.
   * http://illposed.net/websockets.html
   * http://cran.r-project.org/web/packages/websockets/vignettes/websockets.pdf
  * Websockets package is possible to be adjusted in our code(need more study).
  * Reactive issue in shiny is the difference with our concept.
   * See [http://rstudio.github.io/shiny/tutorial/#inputs-and-outputs Inputs & Outputs] to have some idea how renderText, renderPlot, and reactive work.
   * Shiny also seems to use AJAX. See renderUI function in [http://rstudio.github.io/shiny/tutorial/#dynamic-ui Dynamic UI]. conditionalPanel function seems do it in the client-side using JavaScript.
 # Shiny Server is free and open source, though in the future we will offer a commercially licensed edition with additional features for larger organizations. So, it might be a limitation in the near future, if we just take it. Right now, Shiny provides free beta service.
 # KineticJS
  * There is a bug report slot for users  (https://github.com/ericdrowell/KineticJS/issues?page=1&state=open).
  * Keep changing syntax.

----

Date : 28/01/2013

participants : Jae W.Lee, Jung Hoon Lee, Tae Joon Song, Chung Ha Sung.

Contents
  # Discussion for the next step
   * Remove "delete" function, and add "ctrl+z" for "hide" function.
   * Make to work both box drag search and boolean expression search at the same time. (When searching with boolean statements, [ans] saves not only expression, but also nodes themselves. )
   * Think about histogram bin size later
   * When resizing graphs, set the minimum size.
   * R code generation. (Dr. Jung Hoon Lee will give it to us.)
   * Draw charts (html5) on R.
   * Implement other basic graphs with refining old graphs. ( box-and-whisker )
   * Try other data sets( Try with discontinuous data set)
   * Make another directory for box-and-whisker graph, and put the common parts with scatter and hist graph into one file.
  # Report challenge
   * Better performance when driving large data set.
   * Refine the codes to work with various data set. (including discontinuous data and different x variable in histogram)

Next meeting : 10:00 AM (Korea time) on Sat, 3/16

----

Date : 24/02/2013

participants : Jung Hoon Lee, Chung Ha Sung, Taejoon Song.

Contents
  # Discussion for the next step
   * Add functionality of mouse right click(e.g. hide)
   * Add functionality of the search box(e.g. [ans], delete, reset)
   * Modify the information box and add transition select.
   * Add a text box for histogram of diff.
  # Report challenge
   * Hierarchy the data layer for driving large data set.
  # Later purpose
   * Abstract each function(e.g. framework) to make the project comfortable for many charts.
   * Complete the prototype.
 
Next meeting : TBD.

----

Date : 16/02/2013

participants : Jae W.Lee, Jung Hoon Lee, Chung Ha Sung.

Contents

  # Report challenges 
   * Figuring out solutions to resolve finding conflict the same node ids which are in different stages or layers in order to remove select layer which make the program heavy. -> should know exact function of a node finding function and understand kinetic library(relation between stage and node).
   * The program is not compatible with every browser. -> should be compatible with Firefox first, other browser later(priority low).
  # Discussion for the next step
   * Make prototype first at least until 1st week on March.
   * Set the prototype level 
    # Interactive selection node graph with many datasets without any bug.
    # Searching box(boolean language) using javascript.
    # Information box of each node.
  # Later purpose
   * Abstract each function(e.g. framework) to make the project comfortable for many charts.
   * Divide work(e.g. R code generation & Server offloading).

Next meeting : 01:00 PM (which is 11:00 PM in NJ Time) on Sun, 2/24 through skype.

----

Date : 28/01/2013

participants : Jae W.Lee, Jung Hoon Lee, Tae Joon Song, Chung Ha Sung.

Contents

  # Environment Settings
   * Set up the google code and SVN directory to manage the project.
   * Make the project name "---------".
   * Share emails and add google talk ID.
   * Set up conference call schedules : once per two weeks 
  # First action item
   * Implement drawing function on client side. ex) drawDot, drawLine, plot, point, axis, axisLabel
    # Consider data structure. (ex. array)
    # Should be similar to other languages in order to make it easy for code generation. (HTML5 vs Javascripts)
  # Reference :  
   * http://www.rgraph.net/  (example interactive graph on R)
   * http://stackoverflow.com/ (Q&A for language problems)

Next meeting : 10:30 AM (which is 8:30 PM in NJ Time) on Sat, 2/16